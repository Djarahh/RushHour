Exploration:

State space:

Every car on a RushHour board has 4 or 5 options, depending on it's length.
This is how we came up with the following formula to calculate the
upper bound(UB) of the state space:

x = cars of length 2
y = cars of length 3
n = board length

UB = (n- 1)^x * (n-2)^y

If there are multiple cars on the same row, the options of both these cars decrease.
x = amount of options
b(x) = amount of cars with x amount of options

UB = product(x^b(x))

Objective function:

For every car that's in the way of the little red car at least one or more moves
has to be done. This is the lower bound.

n = red car
alpha = amount of cars in front of red car
beta = amount of cars in front of alpha
gamma = amount of cars in front of gamma
(...)
x = amount of cars in front of x-1

LB = alpha + beta + gamma + ... + x

If you add the constraint of only using a certain composition of the cars one
time, the upper bound is the same as the upper bound of the state space.

TO DO:
- overzicht van de kwaliteiten verschillende algoritmes
- analyse van onze probleem instanties
  - hoe meer bewegingsvrijheid op een bord, hoe moeilijker het bord

game1:
UB = 1E6
empty% = 0.42

game2:
UB = 1E9
empty% = 0.25

game3:
UB = 1E7
empty% = 0.25

game4:
UB = 7.2E14
empty% = 0.33

game5:
UB = 8.4E18
empty% = 0.33

game6:
UB = 5.5E19
empty% = 0.25
