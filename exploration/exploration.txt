Exploration:


State space:

The calculation for the state space comes from two statements:
-  If there are multiple cars on the same row, the freedom of movement of
   both these cars decrease.
-  A car of x length has board_length - x + 1 possible states.

(for example a car of length 2 on a 6x6 board has 5 possible states)

x = amount of freedom
b(x) = amount of cars with x amount of freedom

UB = product of all(x^b(x))


Objective function:

For every car that's in the way of the little red car at least one move
has to be done. This is the only statement you can make about the lower bound.

n = red car
alpha = amount of cars in front of red car
beta = amount of cars in front of alpha
gamma = amount of cars in front of gamma
(...)
x = amount of cars in front of x-1

LB = alpha + beta + gamma + ... + x

If you add the constraint of only using a certain composition of the cars one
time, the upper bound of the objective function is the same as the upper bound
of the state space.


Analysis of algorithms and their solutions

Random possible moves
- amount of states searched: len(solution)
- quality of solution: uncertain

Breadth First Search
- amount of states searched = len(archive) - len(queue)
- quality of solution: the best!

Depth First Search
- amount of states searched = len(archive) - len(stack)
- quality of solution: uncertain

Branch and Bound
- amount of states searched = len(archive) - len(stack)
- quality of solution: depends on running time,
    infinite time --> if new_bound = len(solution) - x,
    then the solution found is max x moves longer than the shortest solution.

Best First Search
- amount of states searched = len(archive) - len(heap)
- quality of solution: depends on random solution and relative to shortest
  solution (BFS solution)

In the case of game boards that cannot be solved with the BFS, which means that
the shortest solution is unknown, the relative quality of the BeFS can be
estimated by extrapolating the difference between the BFS and the BeFS of the
6x6 game boards(see Exploration.png).


Analysis of problem instances:

There are two factors that increase the difficulty of a RushHour board:
1. Length of the shortest solution (the depth of the tree)

The length of the solution is influenced by the amount of hindrance caused
by cars that move in perpendicular paths.

2. Amount of possible moves per level of the tree (breadth of the tree)

The amount of possible moves from each configuration of the game board is
influenced by the freedom of movement of every car.

For every 6x6 game we calculated the shortest solution, the upperbound of
the state space, the percentage of the board that is empty, the total amount of
cars and the amount of states visited.

Based on the shortest solution found and the amount of states that are visited,
something can be said about depth (length of shortest solution) and the
breadth (amount of states visited/length of the shortest solution) of the tree.

game1:
shortest solution found = 33
amount of states visited = 7533
UB = 1E6
empty = 0.42
amount of cars = 9

depth: 33
breadth: 7533/33 = 228
SCORE = depth * breadth = 7524

game2:
shortest solution found = 15
amount of states visited = 1368
UB = 1E9
empty = 0.25
amount of cars = 13

depth: 15
breadth: 1368/15 = 91
SCORE = depth * breadth = 1365

game3:
shortest solution found = 21
amount of states visited = 421
UB = 1E7
empty = 0.25
amount of cars = 13

depth: 21
breadth: 421/21 = 20
SCORE = depth * breadth = 420

For the 9x9 boards the upperbound and the percentage of the board that is empty
were calculated.

game4:
UB = 7.2E14
empty = 0.33

game5:
UB = 8.4E18
empty = 0.33

game6:
UB = 5.5E19
empty = 0.25
